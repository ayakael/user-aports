Patch-Source: https://lists.sr.ht/~tsdh/public-inbox/patches/28735
From bbe5170667fd779c089e6aadd6cfa00f11681e6f Mon Sep 17 00:00:00 2001
From: Jakub Jirutka <jakub@jirutka.cz>
Date: Wed, 26 Jan 2022 00:00:20 +0100
Subject: [PATCH] Add support for placeholders with truncation

---
 README.md   |  5 +++++
 src/tree.rs | 72 ++++++++++++++++++++++++++++++++-----------------------------
 2 files changed, 43 insertions(+), 34 deletions(-)

diff --git a/README.md b/README.md
index 953c133..c3f751f 100644
--- a/README.md
+++ b/README.md
@@ -324,6 +324,11 @@ right now.
 * `fallback_icon` is a path to some PNG/SVG icon which will be used as
   `{app_icon}` if no application-specific icon can be determined.
 
+Placeholders `{app_name}`, `{name}`, `{output_name}`, and `{workspace_name}`
+allows to specify the maximum string length using format `{<name>:<len>}` (e.g.
+`{app_name:10}`).  If the string is longer than the specified length, it will
+be truncated and an ellipsis ("…") will be inserted at the end.
+
 It is crucial that during selection (using wofi or some other menu program)
 each window has a different display string.  Therefore, it is highly
 recommended to include the `{id}` placeholder at least in `container_format`
diff --git a/src/tree.rs b/src/tree.rs
index 02b7f49..88a44c9 100644
--- a/src/tree.rs
+++ b/src/tree.rs
@@ -430,6 +430,11 @@ lazy_static! {
         regex::Regex::new("(.+)(-[0-9.]+)").unwrap();
 }
 
+lazy_static! {
+    static ref PLACEHOLDER_RX: regex::Regex =
+        regex::Regex::new(r"\{(?P<name>[^}:]+)(?::(?P<width>\d+))?\}").unwrap();
+}
+
 fn maybe_html_escape(do_it: bool, text: &str) -> String {
     if do_it {
         text.replace("<", "&lt;")
@@ -471,14 +476,14 @@ impl DisplayFormat for DisplayNode<'_> {
             Type::Container => cfg.get_format_container_format(),
             Type::Window => cfg.get_format_window_format(),
         };
-        fmt.replace("{indent}", &indent.repeat(self.get_indent_level()))
-            .replace("{layout}", format!("{:?}", self.node.layout).as_str())
+        let fmt = fmt
+            .replace("{indent}", &indent.repeat(self.get_indent_level()))
             .replace("{id}", format!("{}", self.node.id).as_str())
             .replace(
                 "{marks}",
                 &maybe_html_escape(
                     html_escape,
-                    &format_marks(&self.node.marks),
+                    &format_marks(&self.node.marks)
                 ),
             )
             .replace(
@@ -497,28 +502,6 @@ impl DisplayFormat for DisplayNode<'_> {
                     ""
                 },
             )
-            .replace(
-                "{app_name}",
-                &maybe_html_escape(html_escape, self.node.get_app_name()),
-            )
-            .replace(
-                "{output_name}",
-                &maybe_html_escape(
-                    html_escape,
-                    self.tree
-                        .get_parent_node_of_type(self.node.id, Type::Output)
-                        .map_or("<no_output>", |w| w.get_name()),
-                ),
-            )
-            .replace(
-                "{workspace_name}",
-                &maybe_html_escape(
-                    html_escape,
-                    self.tree
-                        .get_parent_node_of_type(self.node.id, Type::Workspace)
-                        .map_or("<no_workspace>", |w| w.get_name()),
-                ),
-            )
             .replace(
                 "{app_icon}",
                 util::get_icon(self.node.get_app_name(), &icon_dirs)
@@ -535,15 +518,36 @@ impl DisplayFormat for DisplayNode<'_> {
                     .map(|i| i.to_string_lossy().into_owned())
                     .unwrap_or_else(String::new)
                     .as_str(),
-            )
-            .replace(
-                "{title}",
-                &maybe_html_escape(html_escape, self.node.get_name()),
-            )
-            .replace(
-                "{name}",
-                &maybe_html_escape(html_escape, self.node.get_name()),
-            )
+            );
+        PLACEHOLDER_RX.replace_all(&fmt, |caps: &regex::Captures| {
+            let value = match &caps["name"] {
+                "app_name" => self.node.get_app_name(),
+                "name" | "title" => self.node.get_name(),
+                "output_name" => {
+                    self.tree
+                        .get_parent_node_of_type(self.node.id, Type::Output)
+                        .map_or("<no_output>", |w| w.get_name())
+                },
+                "workspace_name" => {
+                    self.tree
+                        .get_parent_node_of_type(self.node.id, Type::Workspace)
+                        .map_or("<no_workspace>", |w| w.get_name())
+                },
+                _ => "",
+            };
+            let mut value = maybe_html_escape(html_escape, value);
+
+            let width = caps.name("width")
+                .map_or("0", |m| m.as_str())
+                .parse::<usize>()
+                .unwrap();
+
+            if width > 0 && value.len() > width {
+                value.truncate(width - 1);
+                value.push('…');
+            }
+            value.to_owned()
+        }).into()
     }
 
     fn get_indent_level(&self) -> usize {
-- 
2.16.4

