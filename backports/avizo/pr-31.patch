Patch-Source: https://github.com/misterdanb/avizo/pull/31

diff --git a/config.ini b/config.ini
index 3e58340..0e176bb 100644
--- a/config.ini
+++ b/config.ini
@@ -5,6 +5,9 @@
 # The base directory to resolve relative image-path against (default is $XDG_DATA_HOME/avizo).
 ;image-base-dir =

+# The image opacity; allowed values range from 0 (fully transparent) to 1.0 (fully opaque).
+;image-opacity = 1.0
+
 # The width of the notification.
 ;width = 248

@@ -18,6 +21,9 @@
 # Allowed values range from 0 (top) to 1.0 (bottom).
 ;y-offset = 0.75

+# The border radius of the notification in px.
+;border-radius = 16
+
 # The block height of the progress indicator.
 ;block-height = 10

@@ -27,9 +33,12 @@
 # Sets the amount of blocks in the progress indicator.
 ;block-count = 20

-# The background color in the format: rgba([0, 255], [0, 255], [0, 255], [0, 1]).
-;background = rgba(255, 255, 255, 0.5)
+# The color of the notification background in format: rgba([0, 255], [0, 255], [0, 255], [0, 1]).
+;background = rgba(160, 160, 160, 0.8)
+
+# The color of the filled bar blocks in format: rgba([0, 255], [0, 255], [0, 255], [0, 1]).
+;bar-fg-color = rgba(0, 0, 0, 0.8)

-# The foreground color in the format: rgba([0, 255], [0, 255], [0, 255], [0, 1]).
-# Note that this does not affect the image.
-;foreground = rgba(0, 0, 0, 0.5)
+# The color of the unfilled bar blocks in format rgba([0, 255], [0, 255], [0, 255], [0, 1]).
+# Defaults to 'background' with 2x brightness.
+;bar-bg-color =
diff --git a/src/avizo_client.vala b/src/avizo_client.vala
index 849bb03..8585d60 100644
--- a/src/avizo_client.vala
+++ b/src/avizo_client.vala
@@ -5,16 +5,19 @@ interface AvizoService : GLib.Object
 {
 	public abstract string image_path { owned get; set; }
 	public abstract string image_resource { owned get; set; }
+	public abstract double image_opacity { owned get; set; }
 	public abstract double progress { owned get; set; }
 	public abstract int width { owned get; set; }
 	public abstract int height { owned get; set; }
+	public abstract int border_radius { owned get; set; }
 	public abstract int padding { owned get; set; }
 	public abstract double y_offset { owned get; set; }
 	public abstract int block_height { owned get; set; }
 	public abstract int block_spacing { owned get; set; }
 	public abstract int block_count { owned get; set; }
 	public abstract Gdk.RGBA background { owned get; set; }
-	public abstract Gdk.RGBA foreground { owned get; set; }
+	public abstract Gdk.RGBA bar_fg_color { owned get; set; }
+	public abstract Gdk.RGBA bar_bg_color { owned get; set; }

 	public abstract void show(double seconds) throws DBusError, IOError;
 }
@@ -28,16 +31,19 @@ public class AvizoClient : GLib.Application
 	private static string _image_base_dir = @"$(Environment.get_user_data_dir())/avizo";
 	private static string _image_path = "";
 	private static string _image_resource = "volume_muted";
+	private static double _image_opacity = 1.0;
 	private static double _progress = 0.0;
 	private static int _width = 248;
 	private static int _height = 232;
 	private static double _y_offset = 0.75;
 	private static int _padding = 24;
+	private static int _border_radius = 16;
 	private static int _block_height = 10;
 	private static int _block_spacing = 2;
 	private static int _block_count = 20;
-	private static string _foreground = "";
 	private static string _background = "";
+	private static string _bar_fg_color = "";
+	private static string _bar_bg_color = "";

 	private static double _time = 5.0;

@@ -47,16 +53,20 @@ public class AvizoClient : GLib.Application
 		{ "image-base-dir", 0, 0, OptionArg.STRING, ref _image_base_dir, "The base directory to resolve relative image-path against (default is $XDG_DATA_HOME/avizo)", "PATH" },
 		{ "image-path", 0, 0, OptionArg.STRING, ref _image_path, "Use the image specified by the path", "PATH" },
 		{ "image-resource", 0, 0, OptionArg.STRING, ref _image_resource, "Use the image specified by the image resource id", "RESOURCE_ID" },
+		{ "image-opacity", 0, 0, OptionArg.DOUBLE, ref _image_opacity, "Sets the image opacity, allowed values range from 0 (transparent) to 1.0 (opaque)", "DOUBLE" },
 		{ "progress", 0, 0, OptionArg.DOUBLE, ref _progress, "Sets the progress in the notification, allowed values range from 0 to 1", "DOUBLE" },
 		{ "width", 0, 0, OptionArg.INT, ref _width, "Sets the width of the notification", "INT" },
 		{ "height", 0, 0, OptionArg.INT, ref _height, "Sets the height of the notification", "INT" },
 		{ "y-offset", 0, 0, OptionArg.DOUBLE, ref _y_offset, "Sets relative offset of the notification to the top of the screen, allowed values range from 0 (top) to 1.0 (bottom)", "DOUBLE" },
 		{ "padding", 0, 0, OptionArg.INT, ref _padding, "Sets the inner padding of the notification", "INT" },
+		{ "border-radius", 0, 0, OptionArg.INT, ref _border_radius, "Sets the border radius of the notification in px", "INT" },
 		{ "block-height", 0, 0, OptionArg.INT, ref _block_height, "Sets the block height of the progress indicator", "INT" },
 		{ "block-spacing", 0, 0, OptionArg.INT, ref _block_spacing, "Sets the spacing between blocks in the progress indicator", "INT" },
 		{ "block-count", 0, 0, OptionArg.INT, ref _block_count, "Sets the amount of blocks in the progress indicator", "INT" },
-		{ "background", 0, 0, OptionArg.STRING, ref _background, "Sets the background color in the format rgba([0, 255], [0, 255], [0, 255], [0, 1])", "STRING" },
-		{ "foreground", 0, 0, OptionArg.STRING, ref _foreground, "Sets the foreground color in the format rgba([0, 255], [0, 255], [0, 255], [0, 1]), note that this does not affect the image", "STRING" },
+		{ "background", 0, 0, OptionArg.STRING, ref _background, "Sets the color of the notification background in format rgba([0, 255], [0, 255], [0, 255], [0, 1])", "STRING" },
+		{ "foreground", 0, 0, OptionArg.STRING, ref _bar_fg_color, "Deprecated alias for --bar-fg-color", "STRING" },
+		{ "bar-fg-color", 0, 0, OptionArg.STRING, ref _bar_fg_color, "Sets the color of the filled bar blocks in format rgba([0, 255], [0, 255], [0, 255], [0, 1])", "STRING" },
+		{ "bar-bg-color", 0, 0, OptionArg.STRING, ref _bar_bg_color, "Sets the color of the unfilled bar blocks in format rgba([0, 255], [0, 255], [0, 255], [0, 1])", "STRING" },
 		{ "time", 0, 0, OptionArg.DOUBLE, ref _time, "Sets the time to show the notification, default is 5", "DOUBLE" },
 		{ null }
 	};
@@ -142,29 +152,40 @@ public class AvizoClient : GLib.Application
 			_service.image_resource = _image_resource;
 		}

+		_service.image_opacity = _image_opacity;
 		_service.progress = _progress;
 		_service.width = _width;
 		_service.height = _height;
 		_service.padding = _padding;
 		_service.y_offset = _y_offset;
+		_service.border_radius = _border_radius;
 		_service.block_height = _block_height;
 		_service.block_spacing = _block_spacing;
 		_service.block_count = _block_count;

 		if (_background != "")
 		{
-			Gdk.RGBA bg = Gdk.RGBA();
-			bg.parse(_background);
+			var color = parse_rgba(_background);
+			_service.background = color;

-			_service.background = bg;
+			if (_bar_bg_color == "")
+			{
+				var bar_color = color.copy();
+				bar_color.red /= 2;
+				bar_color.green /= 2;
+				bar_color.blue /= 2;
+				_service.bar_bg_color = bar_color;
+			}
 		}

-		if (_foreground != "")
+		if (_bar_bg_color != "")
 		{
-			Gdk.RGBA fg = Gdk.RGBA();
-			fg.parse(_foreground);
+			_service.bar_bg_color = parse_rgba(_bar_bg_color);
+		}

-			_service.foreground = fg;
+		if (_bar_fg_color != "")
+		{
+			_service.bar_fg_color = parse_rgba(_bar_fg_color);
 		}

 		_service.show(_time);
@@ -216,6 +237,18 @@ public class AvizoClient : GLib.Application
 	}
 }

+Gdk.RGBA parse_rgba(string value)
+{
+	var color = Gdk.RGBA();
+	if (!color.parse(value))
+	{
+		// Note: This terminates the process!
+		error("Invalid RGBA color value: %s", value);
+	}
+
+	return color;
+}
+
 public void main(string[] args)
 {
 	AvizoClient client = new AvizoClient();
diff --git a/src/avizo_service.vala b/src/avizo_service.vala
index 7587ad5..4f14ef5 100644
--- a/src/avizo_service.vala
+++ b/src/avizo_service.vala
@@ -26,6 +26,17 @@ public class AvizoWindow : Gtk.Window
 		}
 	}

+	public double image_opacity {
+		get
+		{
+			return image.opacity;
+		}
+		set
+		{
+			image.opacity = value;
+		}
+	}
+
 	public double progress { get; set; }

 	private int _width = 248;
@@ -61,28 +72,15 @@ public class AvizoWindow : Gtk.Window
 	}

 	public int padding { get; set; }
+	public int border_radius { get; set; }

 	public int block_height { get; set; }
 	public int block_spacing { get; set; }
 	public int block_count { get; set; }

 	public Gdk.RGBA background { get; set; default = Gdk.RGBA(); }
-
-	public Gdk.RGBA _foreground = Gdk.RGBA();
-	public Gdk.RGBA foreground
-	{
-		get
-		{
-			return _foreground;
-		}
-
-		set
-		{
-			_foreground = value;
-
-			image.opacity = double.min(1.0, _foreground.alpha * 2.0);
-		}
-	}
+	public Gdk.RGBA bar_fg_color { get; set; default = Gdk.RGBA(); }
+	public Gdk.RGBA bar_bg_color { get; set; default = Gdk.RGBA(); }

 	[GtkChild]
 	private unowned Gtk.Image image;
@@ -114,10 +112,10 @@ public class AvizoWindow : Gtk.Window
 		draw_rect(ctx, 0, 0, _width, _height);

 		ctx.set_operator(Cairo.Operator.SOURCE);
-		ctx.set_source_rgba(background.red, background.green, background.blue, background.alpha);
-		draw_round_rect(ctx, 0, 0, _width, _height, 16);
+		Gdk.cairo_set_source_rgba(ctx, background);
+		draw_round_rect(ctx, 0, 0, _width, _height, border_radius);

-		ctx.set_source_rgba(background.red, background.green, background.blue, background.alpha / 1.5);
+		Gdk.cairo_set_source_rgba(ctx, bar_bg_color);

 		for (int i = 0; i < block_count; i++)
 		{
@@ -127,7 +125,7 @@ public class AvizoWindow : Gtk.Window
 			               block_height);
 		}

-		ctx.set_source_rgba(foreground.red, foreground.green, foreground.blue, foreground.alpha);
+		Gdk.cairo_set_source_rgba(ctx, bar_fg_color);

 		for (int i = 0; i < (int) (block_count * progress); i++)
 		{
@@ -181,22 +179,26 @@ public class AvizoWindow : Gtk.Window
 public class AvizoService : GLib.Object
 {
 	private static string[] props = {
-		"image_path", "image_resource", "progress", "width", "height", "padding",
-		"block_height", "block_spacing", "block_count", "background", "foreground",
+		"image_path", "image_resource", "image_opacity", "progress", "width", "height", "padding",
+		"border_radius", "block_height", "block_spacing", "block_count", "background",
+		"bar_fg_color", "bar_bg_color",
 	};

 	public string image_path { get; set; default = ""; }
 	public string image_resource { get; set; default = "volume_muted"; }
+	public double image_opacity { get; set; default = 1.0; }
 	public double progress { get; set; default = 0.0; }
 	public int width { get; set; default = 248; }
 	public int height { get; set; default = 232; }
 	public int padding { get; set; default = 24; }
 	public double y_offset { get; set; default = 0.75; }
+	public int border_radius { get; set; default = 16; }
 	public int block_height { get; set; default = 10; }
 	public int block_spacing { get; set; default = 2; }
 	public int block_count { get; set; default = 20; }
-	public Gdk.RGBA background { get; set; default = rgba(255, 255, 255, 0.5); }
-	public Gdk.RGBA foreground { get; set; default = rgba(0, 0, 0, 0.5); }
+	public Gdk.RGBA background { get; set; default = rgba(160, 160, 160, 0.8); }
+	public Gdk.RGBA bar_fg_color { get; set; default = rgba(0, 0, 0, 0.8); }
+	public Gdk.RGBA bar_bg_color { get; set; default = rgba(80, 80, 80, 0.8); }

 	private Array<AvizoWindow> _windows = new Array<AvizoWindow>();
 	private int _open_timeouts = 0;
