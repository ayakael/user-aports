Allow to specify context attributes FILES_DS and INIT_SCRIPTS

--- a/opennebula.go
+++ b/opennebula.go
@@ -44,6 +44,8 @@
 	DisableVNC     bool
 	StartRetries   string
 	MachineId      int
+	FilesDs        string
+	InitScripts    string
 }
 
 const (
@@ -235,6 +237,18 @@
 			EnvVar: "ONE_START_RETRIES",
 			Value:  defaultStartRetries,
 		},
+		mcnflag.StringFlag{
+			Name:	"opennebula-files-ds",
+			Usage:	"Files that will be included in the contextualization image",
+			EnvVar:	"ONE_FILES_DS",
+			Value:	"",
+		},
+		mcnflag.StringFlag{
+			Name:	"opennebula-init-scripts",
+			Usage:	"Space-separated names of scripts to run after VM start",
+			EnvVar:	"ONE_INIT_SCRIPTS",
+			Value:	"",
+		},
 	}
 }
 
@@ -278,6 +292,10 @@
 	// CONFIG
 	d.StartRetries = flags.String("opennebula-start-retries")
 
+	// Context
+	d.FilesDs = flags.String("opennebula-files-ds")
+	d.InitScripts = flags.String("opennebula-init-scripts")
+
 	// Either TemplateName or TemplateID
 	if d.TemplateName != "" && d.TemplateID != "" {
 		return errors.New("specify only one of: --opennebula-template-name or --opennebula-template-id, not both")
@@ -459,6 +477,14 @@
 	template.AddCtx("DOCKER_SSH_USER", d.SSHUser)
 	template.AddCtx("DOCKER_SSH_PUBLIC_KEY", string(pubKey))
 	template.AddB64Ctx(keys.StartScriptB64, contextScript)
+
+	if d.FilesDs != "" {
+		template.AddCtx("FILES_DS", d.FilesDs)
+	}
+
+	if d.InitScripts != "" {
+		template.AddCtx("INIT_SCRIPTS", d.InitScripts)
+	}
 
 	// Instantiate
 	log.Infof("Starting	 VM...")
