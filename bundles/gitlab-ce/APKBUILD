# Contributor: Jakub Jirutka <jakub@jirutka.cz>
# Maintainer: Jakub Jirutka <jakub@jirutka.cz>
pkgname=gitlab-ce
_pkgname=${pkgname%-ce}
pkgver=11.8.10_p1
pkgrel=0
pkgdesc="A version control for your server"
url="https://gitlab.com/gitlab-org/gitlab-ce"
arch="all"
license="MIT"
# ruby-irb is needed only for Rails console (gitlab-rails console)
depends="$pkgname-assets=$pkgver-r$pkgrel
	gitaly~=1.12
	gitlab-shell~=8.4
	gitlab-workhorse~=8.0
	ca-certificates
	git>=2.18.0
	http-parser
	libgit2=~0.27
	procps
	py-docutils
	python3
	redis>=2.8
	tzdata
	ruby
	ruby-io-console
	ruby-bigdecimal
	ruby-json
	ruby-rake
	ruby-irb
	ruby-webrick
	ruby-bundler>=1.15.4
	"
makedepends="
	gpgme-dev
	icu-dev
	libffi-dev
	libgcrypt-dev
	libgit2-dev=~0.27
	libxml2-dev
	libxslt-dev
	linux-headers
	openssl-dev
	postgresql-dev
	protobuf-dev
	nodejs>=8.0.0
	re2-dev
	ruby-dev
	ruby-grpc
	yarn>=1.2.0
	"
pkgusers="git"
pkggroups="git"
install="$pkgname.pre-install $pkgname.post-install $pkgname.post-upgrade"
subpackages="$pkgname-assets::noarch"
source="https://github.com/jirutka/gitlabhq/archive/v$pkgver/gitlabhq-v$pkgver.tar.gz
	remove-clusters-from-ui-and-routes.patch
	$_pkgname.initd
	$_pkgname.mailroom.initd
	$_pkgname.rails.initd
	$_pkgname.sidekiq.initd
	$_pkgname.confd
	$_pkgname.logrotate
	bin-wrapper.in
	"
builddir="$srcdir/gitlabhq-$pkgver"

_prefix="/usr/lib/bundles/$_pkgname"

prepare() {
	local sysgemdir=$(ruby -e 'puts Gem.default_dir')

	default_prepare

	cd "$builddir"

	# The default log level is very chatty.
	sed -i 's/^\(\s*config.log_level\s*=\).*$/\1 :warn/' \
		config/environments/production.rb

	# This is not needed, the secret_token is generated by the
	# gitlab-shell package. It also makes problems in the build phase.
	rm config/initializers/gitlab_shell_secret_token.rb

	# Remove some useless configs.
	rm config/database.yml.env \
		config/database.yml.mysql \
		config/karma.config.js \
		config/unicorn.rb.example.development \
		config/environments/development.rb \
		config/environments/test.rb

	# Remove all locale files except en.
	find locale -type d -mindepth 1 ! -name en -exec rm -rf {} +

	# This Google gem is totally messed, so we can't install it from
	# RubyGems using Bundler.
	mkdir -p vendor/gems/grpc
	cp -r "$sysgemdir"/gems/grpc-*/* vendor/gems/grpc/
	cp "$sysgemdir"/specifications/grpc-*.gemspec \
			vendor/gems/grpc/grpc.gemspec
	cp "$sysgemdir"/extensions/*/*/grpc-*/grpc/grpc_c.so \
		vendor/gems/grpc/src/ruby/lib/grpc/
}

build() {
	local bundle_opts="--deployment --jobs=${JOBS:-2} --no-cache
		--without exclude development kerberos metrics mysql test"

	cd "$builddir"

	msg "Installing Ruby gems..."
	bundle config build.nokogiri --use-system-libraries \
		--with-xml2-include=/usr/include/libxml2 \
		--with-xslt-include=/usr/include/libxslt
	bundle config build.rugged --use-system-libraries
	bundle config build.gpgme --use-system-libraries
	bundle $bundle_opts

	# Patch installed gem gitlab-markup to use python3.
	# Option "-S" causes that Python cannot find docutils module.
	sed -i 's/python2 -S/python3/g' \
		vendor/bundle/ruby/*/gems/gitlab-markup-*/lib/github/markups.rb

	# Remove non-sense require of code for tests from top-level module
	# (we're gonna delete tests from the package).
	sed -i '/require .carrierwave/test/matchers./d' \
		vendor/bundle/ruby/*/gems/carrierwave-*/lib/carrierwave.rb

	msg "Installing npm modules..."
	yarn install --production --frozen-lockfile


	# Since we have moved assets gems into a group, they are not implicitly
	# loaded by default. This will be reverted after compiling assets.
	sed -i.bak '/Bundler.require(:default, Rails.env/s/)/, :assets)/' \
		config/application.rb

	# assets:precompile and gettext:compile bootstraps the app,
	# so they needs configs.
	cp config/gitlab.yml.example config/gitlab.yml
	cp config/database.yml.postgresql config/database.yml

	# The configured path is not readable for the user building
	# the package, so we must remove it; GitLab will use the default path.
	sed -i '/^\s*secret_file:.*/d' config/gitlab.yml

	(
		export NODE_ENV=production
		export RAILS_ENV=production
		export SECRET_KEY_BASE="top-secret"
		export SKIP_STORAGE_VALIDATION=true
		export USE_DB=false
		export NO_SOURCEMAPS=true

		msg "Compiling assets (this will take few minutes)..."
		bundle exec rake gitlab:assets:compile

		msg "Compiling GetText PO files..."
		bundle exec rake gettext:compile
	)

	# Revert changes.
	mv config/application.rb.bak config/application.rb

	msg "Cleaning assets gems..."
	bundle $bundle_opts assets --clean

	# Create executables in bin/*.
	# See also https://github.com/bundler/bundler/issues/6149.
	bundle binstubs --force bundler mail_room sidekiq unicorn

	# Cleanup
	rm config/database.yml config/gitlab.yml config/secrets.yml
}

package() {
	local destdir="${pkgdir}$_prefix"
	local datadir="$pkgdir/var/lib/gitlab"
	local file dest

	cd "$builddir"

	install -d -m755 "$destdir" "$destdir"/bin

	install -d -m755 -o git -g git \
		"$datadir" \
		"$pkgdir"/etc/gitlab \
		"$pkgdir"/var/log/gitlab \
		"$datadir"/pages

	install -d -m700 -o git -g git \
		"$datadir"/artifacts \
		"$datadir"/builds \
		"$datadir"/lfs-objects \
		"$datadir"/registry \
		"$datadir"/uploads \
		"$pkgdir"/var/tmp/gitlab/downloads \
		"$pkgdir"/var/tmp/gitlab/backups

	install -d -m02770 -o git -g git \
		"$datadir"/repositories

	# Install application files.
	# Note: *VERSION files and doc directory are required (Help in GitLab
	# menu refers to the doc directory).
	cp -rl .bundle config.ru Gemfile* INSTALLATION_TYPE Rakefile *VERSION \
		app db doc fixtures config lib locale public vendor \
		"$destdir"/

	install -m755 -t "$destdir"/bin \
		bin/bundle bin/mail_room bin/rails bin/rake \
		bin/sidekiq bin/unicorn_rails


	cd "$destdir"

	# Not needed in runtime since we have already compiled all assets.
	rm -R app/assets vendor/assets
	rm config/initializers/gettext_rails_i18n_patch.rb

	# Remove assets not needed for production.
	find public/assets -name '*.vue' -delete
	find public/assets -type d | xargs rmdir --ignore-fail-on-non-empty

	rm -r lib/support db/fixtures/development
	find lib/tasks -maxdepth 1 -type f ! -name cache.rake ! -name setup.rake -delete
	find lib/tasks/gitlab \( -name 'generate_docs.*' \
	                      -o -name 'shell.*' \
	                      -o -name 'test.*' \) -delete

	# Remove docs for features we've disabled and some Google product placement.
	rm -Rf doc/ci/autodeploy/ \
		doc/integration/google.md \
		doc/topics/autodevops/


	cd "$destdir"/vendor/bundle/ruby/*/

	# Remove tests, documentations and other useless files.
	find gems/ \( -name 'doc' \
	           -o -name 'spec' \
	           -o -name 'test' \) \
		-type d -maxdepth 2 -exec rm -fr "{}" +
	find gems/ \( -name 'README*' \
	           -o -name 'CHANGELOG*' \
	           -o -name 'CONTRIBUT*' \
	           -o -name '*LICENSE*' \
	           -o -name 'Rakefile' \
	           -o -name '.*' \) \
		-type f -delete

	# Remove bundled libgit2 sources.
	rm -R gems/rugged-*/vendor/libgit2

	# Remove assets, they are already compiled.
	rm -R gems/gemojione-*/assets

	# Remove sources and binaries of native extensions (they are installed
	# in extensions directory).
	find gems/ -type d -name ext -maxdepth 2 -exec rm -frv "{}" +
	find gems/ -name '*.so' -delete

	# Remove build logs and cache.
	rm -Rf build_info/ cache/
	find extensions/ \( -name gem_make.out -o -name mkmf.log \) -delete


	cd "$destdir"

	mv config/unicorn.rb.example config/unicorn.rb

	# Just to unify for the next loop...
	mv config/sidekiq_queues.yml config/sidekiq_queues.yml.orig

	# Install and symlink config files.
	for file in database.yml.postgresql \
			gitlab.yml.example \
			resque.yml.example \
			sidekiq.yml.example \
			sidekiq_queues.yml.orig \
			initializers/rack_attack.rb.example \
			initializers/smtp_settings.rb.sample; do
		dest="$(basename "${file%.*}")"
		install -m640 -g git -D config/$file "$pkgdir"/etc/gitlab/$dest
		ln -sf /etc/gitlab/$dest "$pkgdir"$_prefix/config/${file%.*}
	done

	# This file will be generated by the post-install script, just prepare symlink.
	ln -sf /etc/gitlab/secrets.yml config/secrets.yml

	cat > "$datadir"/.profile <<-EOF
		export RAILS_ENV=production
		export NODE_ENV=production
		export EXECJS_RUNTIME=Disabled
	EOF

	# Some paths are hard-coded in GitLab, so we must make symlinks. :(
	ln -sf /var/lib/gitlab/uploads public/uploads
	ln -sf /var/log/gitlab log
	ln -sf /var/tmp/gitlab tmp
	ln -sf /var/tmp/gitlab "$datadir"/tmp

	# Install wrapper scripts to /usr/bin.
	local name; for name in rake rails; do
		sed "s/__COMMAND__/$name/g" "$srcdir"/bin-wrapper.in \
			> "$builddir"/gitlab-$name
		install -m755 -D "$builddir"/gitlab-$name "$pkgdir"/usr/bin/gitlab-$name
	done

	for file in $_pkgname $_pkgname.rails $_pkgname.sidekiq $_pkgname.mailroom; do
		install -m755 -D "$srcdir"/$file.initd "$pkgdir"/etc/init.d/$file
	done

	install -m644 -D "$srcdir"/$_pkgname.confd \
		"$pkgdir"/etc/conf.d/$_pkgname

	install -m644 -D "$srcdir"/$_pkgname.logrotate \
		"$pkgdir"/etc/logrotate.d/$_pkgname
}

assets() {
	depends=""
	local destdir="${subpkgdir}$_prefix"

	install -dm755 "$destdir"/public
	mv "${pkgdir}$_prefix"/public/assets "$destdir"/public/
}

sha512sums="abd5ac9d35b977dfd3fc719a78c06ded0344a5d8b73872761074ba2296efbb76116753447946b024bddda5a47d2a6d1cc0864734ea7bb46881bc846de87a2951  gitlabhq-v11.8.10_p1.tar.gz
592f9833b9152db46d774336ec4fa64df7f01ddd7fc37530ae87f38eba039b1610b55a3a8b2814f87831ee2cadb123e9297ca7aac73045fd77403a6d990b6743  remove-clusters-from-ui-and-routes.patch
55b0667d3969113ffd6860652ee8bdb9a534c25f413f33b2739e922c886988e7cea72c1c00c7eecf29fcff3682b1324156365605ffc6aae45d1e0ccddf96288b  gitlab.initd
478759565c27d7e300e69715ed069ca6689fc0f33781a99e4ca9f52a49763e3a46d6a1ca7fa61879b200156543e534f652deec1367c31a52154db6f0f8ecb779  gitlab.mailroom.initd
7ff3ac8ea0b759d313057ef5a792ea29ad2472d2ad9597f54e83702737f25fe4b1e2780760bda04fc19ce8cf8674fb708ba32663a9b31ebba8e22b07a6cd3e4d  gitlab.rails.initd
caa4f70a8dea1edba98e376fa71f8d8ebf9cb9bdcfc5d94009d36bc0e7a004b56dbef93d647bbcad6a16c282f99eaf4911c369e270b6b2f9c29a158119b05c85  gitlab.sidekiq.initd
2b771e23326c5e4f590ea1ba5e12bd44d3d6d6515edf8a79cf2722fb7d3968e60887c4b085a474100ac7562f645bff06b8a085755acd4ce533c5837392e749f2  gitlab.confd
9eb31f31e13cc8d3fe14732a78cbd87f895ef209fe2275e70873736736fc95e6166b60b2f921a99e2284b495467084e1eeb722cb6df7419c9f6f5575abe19a56  gitlab.logrotate
a944c3886388ba1574bf8c96b6de4d9f24ef4a83f553c31a224e17a3b01f2a5c65b60c59b7ed7ca4b25670c60ea8dd41b96a8a623d909d2bb09bdf2520ed7f23  bin-wrapper.in"
